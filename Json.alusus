import "Srl/Console.alusus";
import "Srl/Array.alusus";
import "Srl/String.alusus";

class Json {
    use Srl;
    @shared def skipOperators: Array[Char]({ '{', '[', '"', '\'' });
    @shared def skipOperatorsClose: Array[Char]({ '}', ']', '"', '\'' });
    def jsonString: String;
    def keys: Array[String];
    def values: Array[String];

    handler this~init() {}

    handler this~init(str: String) this.initialize(str);

    handler this~init(str: ptr[array[Char]]) this.initialize(String(1, str));

    handler this~init(json: ref[Json]) {
        this.jsonString = json.jsonString
        this.keys = json.keys
        this.values = json.values
    }

    handler this.initialize(str: String) {
        this.keys.clear();
        this.values.clear();
        this.jsonString = str.trim();
        if this.jsonString.find(",") == -1 {
            this.parse(this.jsonString.slice(1, this.jsonString.getLength() - 2));
        } else {
            this.parseAll();
        }
    }

    handler this.parse(string: String) {
        if this.isObject() {
            def splitArray: Array[String] = this.splitString(string, ':');
            this.keys.add(this.removeQuotes(splitArray(0).trim()));
            this.values.add(string.slice(splitArray(0).getLength() + 1, string.getLength()-1).trim());
        } else if this.isArray() {
            this.values.add(string.trim());
        }
    }

    handler this.parseAll() {
        def index: int;
        def splitArray: Array[String] = this.splitString(this.jsonString.slice(1, this.jsonString.getLength() - 2), ',');
        for index=0, index < splitArray.getLength(), index++ {
            this.parse(splitArray(index));
        };
    }

    handler this.splitString(str: String, splitOperator: Char): Array[String] {
        def stack: Array[Char];
        def arr: Array[String];
        def tempString: String = "";

        def index: int;
        for index=0, index<str.getLength(), index++ {
            if str(index) == '\\' {
                ++index;
                if str(index) == 'n' tempString += "\n"
                else tempString += str(index);
                continue;
            }
            def opInd: int;
            if stack.getLength() > 0 and str(index) == stack(stack.getLength() - 1) {
                stack.remove(stack.getLength() - 1);
            } else {
                for opInd=0, opInd<skipOperators.getLength(), opInd++ {
                    if str(index) == skipOperators(opInd)
                        stack.add(skipOperatorsClose(opInd));
                }
            }

            if str(index) == splitOperator && stack.getLength() == 0 {
                arr.add(tempString);
                tempString = "";
            } else
                tempString += str(index);
        };

        if tempString.getLength() > 0 {
            arr.add(tempString)
        }

        return arr;
    };

    handler this.hasQuotes(stringWithQuotes: String): Bool {
        def stringWithoutQuotes: String = stringWithQuotes
        if stringWithoutQuotes(0) == stringWithoutQuotes(stringWithoutQuotes.getLength() -1) && (stringWithoutQuotes(0) == '"' || stringWithoutQuotes(0) == '\'') {
            return true
        } else if ((
            (stringWithoutQuotes(0) == '"' || stringWithoutQuotes(0) == '\'') &&
            stringWithoutQuotes(0) != stringWithoutQuotes(stringWithoutQuotes.getLength() - 1)
        ) || (
            (
                stringWithoutQuotes(stringWithoutQuotes.getLength() -1) == '"' ||
                stringWithoutQuotes(stringWithoutQuotes.getLength() -1) == '\''
            ) &&
            stringWithoutQuotes(0) != stringWithoutQuotes(stringWithoutQuotes.getLength() -1)
        )) {
            // ERROR: "UNEXPECTED TOKEN" or "UNCOMPLATE QUOTATION"
            // Console.print("\t%s%s%s UNEXPECTED TOKEN %s\t\n", Console.Style.BG_RED, Console.Style.FG_WHITE, Console.Style.BLINK, Console.Style.RESET)
            return false
        }

        return false;
    }

    handler this.removeQuotes(stringWithQuotes: String): String {
        if this.hasQuotes(stringWithQuotes) {
            stringWithQuotes = stringWithQuotes.slice(1, stringWithQuotes.getLength() - 2);
        }

        return stringWithQuotes;
    }

    handler this.removeQuotes(stringWithQuotes: ptr[array[Char]]): String {
        def str: String = stringWithQuotes;
        return this.removeQuotes(str);
    }

    handler this.isObject(): bool {
        if this.jsonString(0) == '{' && this.jsonString(this.jsonString.getLength() - 1) == '}' return true
        else return false;
    }

    handler this.isArray(): bool {
        if this.jsonString(0) == '[' && this.jsonString(this.jsonString.getLength() -1) == ']' return true
        else return false;
    }

    handler this.getLength(): Int {
        return this.values.getLength();
    }

    handler this.get(key: ptr[array[Char]]): String {
        def result: String;

        def index: int = 0;
        for, index < this.keys.getLength(), index++ {
            if this.keys(index) == key {
                result = this.values(index);
            }
        }

        return result;
    }

    handler this.get(index: Int): String {
        def result: String = this.values(index);
        return result;
    }

    handler this.getString(key: ptr[array[Char]]): String {
        def str: String = this.get(key);
        return this.removeQuotes(str);
    }

    handler this.getString(index: Int): String {
        def str: String = this.get(index);
        return this.removeQuotes(str);
    }

    handler this.getObject(key: ptr[array[Char]]): Json {
        def obj: Json = this.get(key);
        return obj;
    }

    handler this.getObject(index: Int): Json {
        def obj: Json = this.get(index);
        return obj;
    }

    handler this.getInt(key: ptr[array[Char]]): Int {
        return String.parseInt(this.get(key));
    }

    handler this.getInt(index: Int): Int {
        return String.parseInt(this.get(index));
    }

    handler this.getFloat(key: ptr[array[Char]]): Float {
        return String.parseFloat(this.get(key));
    }

    handler this.getFloat(index: Int): Float {
        return String.parseFloat(this.get(index));
    }

    handler this.getBool(key: ptr[array[Char]]): Bool {
        def boolean: Bool;

        if this.get(key).toLowerCase() == "true"
            return true
        else if this.get(key).toLowerCase() == "false"
            return false
        return false
    }

    handler this.getBool(index: Int): Bool {
        def boolean: Bool;

        if this.get(index).toLowerCase() == "true"
            return true
        else if this.get(index).toLowerCase() == "false"
            return false
    }

    /* TODO: if json is valid return true or false if it isn't valid
    handler this.isValid(): Bool {
        return ?
    }*/

    handler this = ptr[array[Char]] this.initialize(String(value));

    handler this = String this.initialize(value);

    handler this = ref[Json] {
        this.jsonString = value.jsonString
        this.keys = value.keys
        this.values = value.values
    }
}
